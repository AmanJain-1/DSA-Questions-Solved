package com.aman1;

import java.util.Arrays;
import java.util.Scanner;

public class SearchinSortedmatrix {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int[][] arr = { {1,2,3},
                        {5,6,7},
                        {9,10,11}
                      };
        System.out.println("enter the element you want to search in matrix");
        int target = in.nextInt();

       int[] ans = search(arr, target);
        System.out.println(Arrays.toString(ans));
    }
    static int[] binarysearch(int[][] matrix, int target, int row, int cstart, int cend) {

        if(matrix.length==0) {
            System.out.println("list is empty");
        }
        while( cstart <= cend) {

             int mid= cstart + (cend-cstart)/2 ;

            if (target == matrix[row][mid] ) {
                return new int[] {row,mid};
            }
            else if(matrix[row][mid] > target ) {
                cend = mid - 1;
            }
            else {
                cstart = mid + 1;
            }

        }
        return new int[] {-1,-1} ;
    }


    static int[] search( int[][] matrix , int target ) {

        int rows = matrix.length;
        int col = matrix[0].length;

        if( rows == 0 ) {
            return new int[]{-1,-1};
        }
        if( rows == 1 ) {
            binarysearch( matrix , target, 0,0, col-1);
        }
        int rstart = 0;
        int rend = rows-1;
        int cmid = col /2;

        while( rstart < (rend-1))  { //while this is true it means matrix has more than 2 rows.

            int mid = rstart + (rend-rstart)/2;

            if(matrix[mid][cmid]==target) {
                return new int[] {mid,cmid};
            }
            else if(matrix[mid][cmid]>target) {
                rend = mid;
            }
            else {
                rstart = mid;
            }
        }
        // now we have only two rows left
        //check whether the target is in the col of 2 rows.

        if(matrix[rstart][cmid] == target) {
            return new int[]{rstart, cmid};
        }

        if(matrix[rstart+1][cmid] == target) {
            return new int[] {rstart+1, cmid} ;
        }
        // 1st half check
        if(target <= matrix[rstart][cmid-1])  {
            return binarysearch(matrix , target, rstart, 0 , cmid-1);
        }
        // 2nd half check
        if( target >= matrix[rstart][cmid+1] && target <= matrix[rstart][col-1])  {
           return binarysearch(matrix , target, rstart, cmid+1 , col-1);
        }
        // 3rd half check
        if(target <= matrix[rstart+1][cmid-1])  {
            return binarysearch(matrix , target, rstart+1, 0 , cmid-1);
        }
        // 4th half check
        else  {
            return binarysearch(matrix , target, rstart+1, cmid+1 , col-1);
        }

    }
}
